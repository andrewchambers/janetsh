#! /usr/bin/env janet

(import shlib)
(import sh)

(var *sysrc-file* "/etc/janetsh.rc")
(var *rc-file* (string (os/getenv "HOME") "/.janetsh.rc"))
(var *hist-file* nil)
(var *script* nil)
(var *parens* false)
(var *handleopts* true)

(def- user-env (fiber/getenv (fiber/current)))

(defn- help-handler
  [&]
  (print "usage: janetsh [options] [script] [args]")
  (print
  `Options are:
  -h | --help : Show this help and exit.
  -norc : Don't load the default rc file.
  -rc path : Use an alternative rc file.
  -nosysrc : Don't load the system rc file.
  -sysrc path : Use an alternative system rc file.
  -parens : Don't add implicit parens to interactive terminal.
  -- : Stop handling options`)
  (os/exit 1)
  1)

# Option handlers
(def handlers :private
  {"-h"     help-handler
   "--help" help-handler
   "--"     (fn [&] (set *handleopts* false) 1)
   "-norc"  (fn [&] (set *rc-file* nil) 1)
   "-rc"    (fn [i &] (set *rc-file* (get process/args (+ i 1))) 2)
   "-nosysrc"  (fn [&] (set *sysrc-file* nil) 1)
   "-sysrc"    (fn [i &] (set *sysrc-file* (get process/args (+ i 1))) 2)
   "-parens" (fn [&] (set *parens* true) 1)})

(defn- dohandler [n i &]
  (def h (get handlers n))
  (if h (h i) (do (print "unknown option -" n) ((get handlers "-h")))))

# Process arguments
(var new-args @[])

(var i 2)
(def lenargs (length process/args))
(while (< i lenargs)
  (def arg (get process/args i))
  (if (and *handleopts* (= "-" (string/slice arg 0 1)))
    (+= i (dohandler arg i))
    (do
      (array/push new-args arg)
      (+= i 1)
      (when (not *script*)
         (set *script* arg)))))

(array/remove process/args 0 (length process/args))
(array/concat process/args new-args)

(var *get-prompt*
     (fn *get-prompt* [p]
       (string (sh/shrink-path (os/cwd)) " " (parser/state p) "$ ")))

(if *script*
  (sh/init true)
  (sh/init false))

(var *get-completions*
  (fn [line start end]
    (sh/get-completions line start end user-env)))

(defn- getline [prompt buf]
  (when-let [ln (shlib/input/readline prompt *get-completions*)]
    (buffer/push-string buf ln "\n")
    buf))

(def- implicit-checker-peg
  (peg/compile '(not (* (any (set " \t\r\f\v")) (set `"(@[{`)))))

(defn- want-implicit-parens [buf p]
  (and (not *parens*)
       (> (length buf) 1)
       (empty? (parser/state p))
       (peg/match implicit-checker-peg buf)))

(defn- getchunk [buf p]
  (sh/update-all-jobs-status)
  (def prompt (try (*get-prompt* p) ([e] "$ ")))
  (when (getline prompt buf)
    (when (want-implicit-parens buf p)
      (let [line (string buf)]
        (buffer/clear buf)
        (buffer/format buf "(sh/$? %s)\n" line)))
    buf))

(setdyn :pretty-format "%.40p")

# convenience bindings for our user-env.
(def $$?  :macro sh/$$?)
(def $$_? :macro sh/$$_?)
(def $??  :macro sh/$??)
(def $$_  :macro sh/$$_)
(def $$   :macro sh/$$)
(def $?   :macro sh/$?)
(def $    :macro sh/$)
(def do-lines sh/do-lines)
(def out-lines sh/out-lines)

(var *janetsh-repl*
  (fn *janetsh-repl*
    []
    (when *hist-file*
      (try
        (shlib/input/history-load *hist-file*)
        ([e] nil)))

    (repl getchunk nil user-env)

    (when *hist-file*
      (shlib/input/history-save *hist-file*))))

(defn- run-interactive
  []
  # Load user rc file before
  (when *rc-file*
    (when (os/stat *rc-file*)
      # FIXME: filename in errors.
      (try
        (eval-string (slurp *rc-file*))
        ([e] (file/write stderr (string "error while loading " *rc-file* " : " e "\n"))))))
  (*janetsh-repl*))

(defn- run-func
  []
  (when *sysrc-file*
    (when (os/stat *sysrc-file*)
      # FIXME: filename in errors.
      (try
        (eval-string (slurp *sysrc-file*))
        ([e]
          (file/write stderr (string "error while loading " *sysrc-file* " : " e "\n"))
          (file/flush stderr)
          (when *script*
            # Don't limp along in script mode if the whole system is broken.
            (os/exit 1))))))

    (if *script*
      (import* *script* :prefix "" :exit true)
      (run-interactive)))

(def- user-fiber (fiber/new run-func :e))
(fiber/setenv user-fiber user-env)
(def- fiber-result (resume user-fiber))

# Prune jobs so less stale stuff is
# handled by our cleanup handlers.
(sh/prune-complete-jobs)

(file/flush stdout)
(file/flush stderr)

(if (= (fiber/status user-fiber) :error)
 (do
   (debug/stacktrace user-fiber fiber-result)
   (os/exit 1))
 (os/exit 0))
